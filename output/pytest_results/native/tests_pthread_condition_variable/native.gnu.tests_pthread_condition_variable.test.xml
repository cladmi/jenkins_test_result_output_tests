<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="1" name="native.gnu" skips="0" tests="1" time="13.394"><testcase classname="native.gnu.tests_pthread_condition_variable.test.tests.01-run" file="tests/01-run.py" line="12" name="testfunc" time="13.344337224960327"><failure message="pexpect.exceptions.TIMEOUT: condition fulfilled.">child = &lt;pytest_child.CustomSpawn object at 0x7f7725d557f0&gt;

    def testfunc(child):
        child.expect(&apos;START&apos;)
&gt;       child.expect(&apos;condition fulfilled.&apos;)

tests/01-run.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;pytest_child.CustomSpawn object at 0x7f7725d557f0&gt;
pattern = &apos;condition fulfilled.&apos;, args = (), kwargs = {}

    def expect(self, pattern, *args, **kwargs):
        # pylint:disable=arguments-differ
        try:
            return super().expect(pattern, *args, **kwargs)
        except (pexpect.TIMEOUT, pexpect.EOF) as exc:
            exc.orig_value = exc.value
            exc.value = pattern
&gt;           raise exc.with_traceback(None) from None
E           pexpect.exceptions.TIMEOUT: condition fulfilled.

../../dist/tools/pytest_wrappers/test/pytest_child.py:90: TIMEOUT</failure><system-out>/home/cladmi/git/work/RIOT/tests/pthread_condition_variable/bin/native/tests_pthread_condition_variable.elf  
RIOT native interrupts/signals initialized.
LED_RED_OFF
LED_GREEN_ON
RIOT native board initialized.
RIOT native hardware initialization complete.

main(): This is RIOT! (Version: buildtest)
START
Still alive alternated [count: 100k] times.
Still alive alternated [count: 200k] times.
Still alive alternated [count: 300k] times.
Still alive alternated [count: 400k] times.
Still alive alternated [count: 500k] times.
Still alive alternated [count: 600k] times.
Still alive alternated [count: 700k] times.
Still alive alternated [count: 800k] times.

</system-out></testcase></testsuite>