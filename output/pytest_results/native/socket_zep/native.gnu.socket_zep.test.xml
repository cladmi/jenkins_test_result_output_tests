<?xml version="1.0" encoding="utf-8"?><testsuite errors="1" failures="0" name="native.gnu.socket_zep" skips="0" tests="1" time="0.031"><testcase classname="native.gnu.socket_zep.test.tests.01-run" file="tests/01-run.py" line="27" name="testfunc" time="0.0007698535919189453"><error message="test setup failure">request = &lt;SubRequest &apos;child&apos; for &lt;Function &apos;testfunc&apos;&gt;&gt;, timeout = None
logconsole = True

    @pytest.fixture(scope=&quot;module&quot;)
    def child(request, timeout=None, logconsole=TEST_LOG_CONSOLE):
        &quot;&quot;&quot;Implement the &apos;child&apos; fixture.&quot;&quot;&quot;
        timeout_kwargs = {}
&gt;       timeout = _test_timeout(request, timeout)

../../dist/tools/pytest_wrappers/test/pytest_child.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../dist/tools/pytest_wrappers/test/pytest_child.py:128: in _test_timeout
    timeout = _read_run_timeout(request.module.__file__)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

testfile = &apos;/home/cladmi/git/work/RIOT/tests/socket_zep/tests/01-run.py&apos;

    def _read_run_timeout(testfile):
        &quot;&quot;&quot;Return the &apos;timeout&apos; value from the test file.
    
        This is a hack to extract timeout from the test file.
        &quot;&quot;&quot;
        run_args_re = re.compile(r&apos;^    sys.exit\(run\([^,]+(.*)\)\)$&apos;)
        timeout_re = re.compile(r&apos;timeout=(\d+)&apos;)
    
        with open(testfile) as testfd:
            for line in testfd:
                args_match = run_args_re.match(line)
                if not args_match:
                    continue
                run_args = args_match.group(1)
    
                # Found the &apos;run&apos; function and arguments
    
                timeout_match = timeout_re.search(run_args)
                if not timeout_match:
                    return None
                timeout = timeout_match.group(1)
    
                return int(timeout)
    
&gt;       raise ValueError(&quot;Could not extract &apos;timeout&apos;&quot;)
E       ValueError: Could not extract &apos;timeout&apos;

../../dist/tools/pytest_wrappers/test/pytest_child.py:156: ValueError</error></testcase></testsuite>