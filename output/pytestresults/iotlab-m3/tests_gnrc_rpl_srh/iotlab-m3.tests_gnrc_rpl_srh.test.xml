<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="1" name="riot_tests" skips="0" tests="1" time="6.707"><properties><property name="RIOT_VERSION" value="2019.07-devel-249-g5bb49-HEAD"/></properties><testcase time="0"></testcase><testcase time="0"></testcase><testcase time="0"></testcase><testcase time="0"></testcase><testcase time="0"></testcase><testcase time="0"></testcase><testcase time="0"></testcase><testcase time="0"></testcase><testcase time="0"></testcase><testcase classname="iotlab-m3.tests_gnrc_rpl_srh" file="tests/01-run.py" line="328" name="test.tests.01-run.testfunc" time="6.246094703674316"><failure message="pexpect.exceptions.TIMEOUT: OK \((\d+) tests\)">child = &lt;pytest_child.CustomSpawn object at 0x7f2a24af0898&gt;

    def testfunc(child):
        global sniffer
        tap = get_bridge(os.environ[&quot;TAP&quot;])
    
&gt;       child.expect(r&quot;OK \((\d+) tests\)&quot;)     # wait for and check result of unittests

tests/01-run.py:333: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;pytest_child.CustomSpawn object at 0x7f2a24af0898&gt;
pattern = &apos;OK \\((\\d+) tests\\)&apos;, args = (), kwargs = {}

    def expect(self, pattern, *args, **kwargs):
        # pylint:disable=arguments-differ
        try:
            return super().expect(pattern, *args, **kwargs)
        except (pexpect.TIMEOUT, pexpect.EOF) as exc:
            exc.orig_value = exc.value
            exc.value = pattern
&gt;           raise exc.with_traceback(None) from None
E           pexpect.exceptions.TIMEOUT: OK \((\d+) tests\)

../../../iotlab-os-ci/tools/pytest/pytest_child.py:113: TIMEOUT</failure><system-out>make[2]: Nothing to be done for &apos;all&apos;.
ssh -t iotlab@saclay.iot-lab.info &apos;socat - tcp:m3-1.saclay.iot-lab.info:20000&apos;
�#x00�#x00�����#x00#x00#x00���#x00#x00#x00���#x00��x�#x00�#x00��#x00#x00�#x00#x00�#x00���#x00��x�#x00���#x00#x00#x00���#x00��x�#x00#x00���#x00�#x00#x00#x00#x00#x00#x00#x00�#x00�#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00�#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00�#x00�#x00���#x00��x��#x00#x00���#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00���#x00#x00�#x00#x00���#x00��x�#x00�#x00����x#x00#x00�����#x00�����#x00��#x00������#x00�#x00#x00#x00#x00�x�#x00�������#x00�#x00#x00�����#x00�#x00#x00#x00#x00����#x00��#x00�#x00�x��#x00#x00#x00#x00#x00��#x00�x��x��#x00#x00��#x00��������#x00��#x00�#x00#x00#x00#x00#x00��x������#x00��#x00#x00�#x00���x���#x00�#x00������#x00�#x00#x00�#x00����x#x00#x00����#x00#x00#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00���x���#x00�#x00���#x00�#x00�#x00#x00�#x00����x#x00#x00�#x00#x00����#x00#x00�#x00�����#x00#x00#x00���x���#x00�#x00�����#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00#x00��#x00�#x00����������x��#x00��#x00�������#x00��#x00��#x00�#x00��#x00�#x00#x00�#x00����x#x00#x00#x00#x00#x00����#x00#x00�#x00�����#x00#x00#x00���x���#x00�#x00�����#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00#x00�����x��#x00���x����������x��#x00��#x00�������#x00��#x00��#x00�#x00��#x00�#x00#x00�#x00����x#x00#x00�#x00#x00����#x00#x00�#x00�����#x00#x00#x00���x���#x00�#x00�����#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00����������������#x00�#x00���������#x00��x���#x00����#x00���x��#x00#x00�#x00��#x00�#x00#x00�#x00����x#x00#x00#x00�#x00����#x00#x00�#x00�����#x00#x00#x00���x���#x00�#x00�����#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00���x��#x00�#x00��#x00�����#x00����#x00��������#x00�#x00#x00��x��#x00#x00�����#x00�����x��#x00������#x00#x00��x��#x00#x00�#x00�#x00#x00�#x00����x#x00#x00�x�#x00����#x00#x00�#x00�����#x00#x00#x00���x���#x00�#x00�����#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00���x��#x00�#x00��#x00�����#x00����#x00�#x00#x00��x��#x00#x00�����#x00�����x��#x00������#x00#x00��x��#x00#x00�#x00�#x00#x00�#x00����x#x00#x00#x00�#x00#x00�#x00����x#x00#x00�#x00�����#x00#x00#x00���x�#x00#x00#x00#x00���x���#x00�#x00���#x00�����#x00�#x00#x00�#x00����x#x00#x00#x00#x00#x00#x00#x00��#x00�#x00�����#x00#x00#x00���#x00#x00#x00���#x00��x�#x00�#x00��#x00#x00�#x00#x00�#x00���#x00��x�#x00���#x00#x00#x00���#x00��x�#x00#x00���#x00�#x00#x00#x00#x00#x00#x00#x00�#x00�#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00�#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00�#x00�#x00���#x00��x��#x00#x00���#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00#x00���#x00#x00�#x00#x00���#x00��x�#x00�#x00����x#x00#x00�����#x00�����#x00��#x00������#x00�#x00#x00#x00#x00�x�#x00�������#x00�#x00#x00�����#x00�#x00#x00#x00#x00����#x00��#x00�#x00�x��#x00#x00#x00#x00#x00��#x00�x��x��#x00#x00��#x00��������#x00��#x00�#x00#x00#x00#x00#x00��x������#x00��#x00#x00�#x00���x���#x00�#x00������#x00�#x00#x00�#x00����x#x00#x00����#x00#x00#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00���x���#x00�#x00���#x00�#x00�#x00#x00�#x00����x#x00#x00�#x00#x00����#x00#x00�#x00�����#x00#x00#x00���x���#x00�#x00�����#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00#x00��#x00�#x00����������x��#x00��#x00�������#x00��#x00��#x00�#x00��#x00�#x00#x00�#x00����x#x00#x00#x00#x00#x00����#x00#x00�#x00�����#x00#x00#x00���x���#x00�#x00�����#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00#x00�����x��#x00���x����������x��#x00��#x00�������#x00��#x00��#x00�#x00��#x00�#x00#x00�#x00����x#x00#x00�#x00#x00����#x00#x00�#x00�����#x00#x00#x00���x���#x00�#x00�����#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00����������������#x00�#x00���������#x00��x���#x00����#x00���x��#x00#x00�#x00��#x00�#x00#x00�#x00����x#x00#x00#x00�#x00����#x00#x00�#x00�����#x00#x00#x00���x���#x00�#x00�����#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00���x��#x00�#x00��#x00�����#x00����#x00��������#x00�#x00#x00��x��#x00#x00�����#x00�����x��#x00������#x00#x00��x��#x00#x00�#x00�#x00#x00�#x00����x#x00#x00�x�#x00����#x00#x00�#x00�����#x00#x00#x00���x���#x00�#x00�����#x00#x00�#x00�#x00������#x00�#x00#x00�#x00�����#x00���x��#x00�#x00��#x00�����#x00����#x00�#x00#x00��x��#x00#x00�����#x00�����x��#x00������#x00#x00��x��#x00#x00�#x00�#x00#x00�#x00����x#x00#x00#x00�#x00#x00�#x00����x#x00#x00�#x00�����#x00#x00#x00���x�#x00#x00#x00#x00���x���#x00�#x00���#x00�����#x00�#x00#x00�#x00����x#x00#x00#x00#x00#x00#x00#x00�
</system-out></testcase></testsuite>